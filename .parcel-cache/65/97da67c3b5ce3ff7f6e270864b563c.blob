var helpers = require("../../../../../../AppData/Roaming/npm/node_modules/parcel/node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  _parcelHelpers.export(exports, "MainView", function () {
    return MainView;
  });
  var _react = require('react');
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  var _axios = require('axios');
  var _axiosDefault = _parcelHelpers.interopDefault(_axios);
  var _loginViewLoginView = require('../login-view/login-view');
  var _registrationViewRegistrationView = require('../registration-view/registration-view');
  var _movieCardMovieCard = require('../movie-card/movie-card');
  var _movieViewMovieView = require('../movie-view/MovieView');
  var _jsxFileName = "C:\\Users\\anps8\\Documents\\careerfoundry\\myFlix-client\\src\\components\\main-view\\main-view.jsx";
  class MainView extends _reactDefault.default.Component {
    constructor() {
      super();
      // initializes your component’s state, and without it, you’ll get an error if you try to use this.state inside constructor()
      this.state = {
        // this is the component statement(variable)??????
        movies: [],
        selectedMovie: null,
        user: null
      };
    }
    componentDidMount() {
      _axiosDefault.default.get('https://myflapix.herokuapp.com/movies').then(response => {
        this.setState({
          movies: response.data
        });
      }).catch(error => {
        console.log(error);
      });
    }
    setSelectMovie(newSelectedMovie) {
      this.setState({
        selectedMovie: newSelectedMovie
      });
    }
    /*When a user successfully logs in, this function updates the `user` property in state to that *particular user*/
    onLoggedIn(user) {
      this.setState({
        user
      });
    }
    onRegistration(user) {
      this.setState({
        user
      });
    }
    render() {
      // const movies = this.state.movies; /////// instead of this expression we use the "object destruction"
      const {movies, selectedMovie, user} = this.state;
      // What is the object destruction? I did not understand
      if (user === 'newUser') return (
        /*#__PURE__*/_reactDefault.default.createElement(_registrationViewRegistrationView.RegistrationView, {
          onRegistration: user => this.onRegistration(user),
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 61,
            columnNumber: 40
          }
        })
      );
      /*If there is no user, the LoginView is rendered. If there is a user logged in, the user details are *passed as a prop to the LoginView*/
      if (!user) return (
        /*#__PURE__*/_reactDefault.default.createElement(_loginViewLoginView.LoginView, {
          onLoggedIn: user => this.onLoggedIn(user),
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 64,
            columnNumber: 26
          }
        })
      );
      // if (selectedMovie) return <MovieView movie={selectedMovie}/>
      if (movies.length === 0) return (
        /*#__PURE__*/_reactDefault.default.createElement("div", {
          className: "main-view",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 68,
            columnNumber: 41
          }
        })
      );
      return (
        /*#__PURE__*/_reactDefault.default.createElement("div", {
          className: "main-view",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 71,
            columnNumber: 13
          }
        }, /*#__PURE__*/_reactDefault.default.createElement("div", {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 72,
            columnNumber: 17
          }
        }, "MyFlixApplication"), selectedMovie ? /*#__PURE__*/_reactDefault.default.createElement(_movieViewMovieView.MovieView, {
          movie: selectedMovie,
          onBackClick: newSelectedMovie => {
            this.setSelectMovie(newSelectedMovie);
          },
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 75,
            columnNumber: 23
          }
        }) : movies.map(movie => {
          return (
            /*#__PURE__*/_reactDefault.default.createElement(_movieCardMovieCard.MovieCard, {
              key: movie._id,
              movieData: movie,
              onMovieClick: movie => {
                this.setSelectMovie(movie);
              },
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 79,
                columnNumber: 37
              }
            })
          );
        }))
      );
    }
  }
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
